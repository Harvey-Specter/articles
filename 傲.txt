15. 東軟での業務責任
    2015 年に私は沈陽にやってきて、東軟でブロックチェーンの新技術調査(ちょうさ)を担当しました。当時(とうじ)、ブロックチェーンの企業応用(おうよう)はまだ初期段階(しょきだんかい)でした。その後、ブロックチェーン（blockchain）プラットフォーム（platform）製品の設計と開発に参加し、製品の詳細設計(しょうさいせっけい)と操作(そうさ)マニュアル(manual)を作成しました。ブロックチェーンプラットフォーム製品のリリース後は、プラットフォーム（platform）の普及活動(ふきゅうかつどう)や顧客へのインストール(install)とデバッグを担当しました

過去(かこ)のプロジェクトの中で、一番自慢できるプロジェクトはどれですか？そのプロジェクトで担当した役割、またそこで直面(ちょくめん)した課題(かだい)とそれをどのように解決(かいけつ)したかについて説明してください

我在东软时候开发的区块链应用平台,这个平台是基于Hyperledger Fabric的二次开发,我在这个项目中负责了整个项目的设计和开发,这个平台的难点在于如何优化区块链的性能并将区块链技术应用到实际的业务场景中,通过研究Hyperledger Fabric的源代码,扩展和优化了它的很多功能,比如支持多种加密算法,支持多种状态数据库,支持多种容器,能够自动生成智能合约等等.

ソフトウェアの初期バージョンでは、バックエンドにGo言語を使用していました。後に、FabricのJava言語APIの開発が進(すす)んでいることに気付き、調査(ちょうさ)の結果(けっか)、ソフトウェアのバックエンドをJava Spring Bootで開発し直(なお)しました。また、ブロックチェーン(blockchain)の基本機能（証明書(しょうめいしょ)サービスやブロック(block)解析(かいせき)など）およびコンテナ関連のインターフェース(interface)も、アプリケーションのバックエンドから呼(よ)び出(だ)すためにサービスとしてラップされ、現在はDocker、containerd、Kubernetesなどの主要なコンテナ環境をサポートしています。

この製品の目的(もくてき)は、ブロックチェーンの特性(とくせい)を活用(かつよう)してデータ(data)とトランザクション(transaction)プログラム(program)のセキュリティ(scrurity)と信頼(しんらい)性を確保(かくほ)することです。たとえば、トランザクション(transaction)の両当事者(りょうとうじしゃ)のデータはそれぞれの状態(じょうたい)データベース(database)に保存(ほぞん)され、トランザクション(transaction)の両当事者(りょうとうじしゃ)のプログラム(program)はスマート(smart)コントラクト(contract)の形式(けいしき)でそれぞれのブロックチェーン(blockchain)ノード(node)に展開されます。データまたは(smart)コントラクト(contract)の一方(いっぽう)的な変更(へんこう)は、後続(こうぞく)のトランザクション(transaction)の失敗(しっぱい)を引き起こします。これにより、データとトランザクション(transaction)ロジック(logic)がすべての関係(かんけい)者にとって可視(かし)であることと、データ(data)とプログラム(program)が改ざんされないことが保証(ほしょう)されます。
取引(とりひき)関係者の承認(しょうにん)を得(え)た場合のみ、(smart)コントラクト(contract)の変更や取引データの変更はできます。

私が東软で開発したブロックチェーンアプリケーションプラットフォームは、Hyperledger Fabricをベースにした二次開発です。このプロジェクト(project)では、全体の設計と開発を担当しました。このプラットフォームの難点(なんてん)は、ブロックチェーンのパフォーマンス(proformance)を最適化し、ブロックチェーン技術を実際(じっさい)のビジネスシーンに適用する方法です。Hyperledger Fabricのソースコードを研究(けんきゅう)し、さまざまな機能を拡張(かくちょう)・最適化しました。例えば、さまざまな暗号化(あんごうか)アルゴリズム(algorithm)のサポート、さまざまな状態(じょうたい)データベースのサポート、さまざまなコンテナ(container)のサポート、スマートコントラクトの自動生成(せいせい)などです。

I was involved in the design and development of a blockchain application platform during my time at Neusoft. This platform was a secondary development based on Hyperledger Fabric. The main challenge of this project was to optimize the performance of the blockchain and apply blockchain technology to real-world business scenarios. By studying the source code of Hyperledger Fabric, I extended and optimized many of its functionalities. For example, I added support for multiple encryption algorithms, multiple state databases, multiple containers, and automated smart contract generation, among other enhancements.

--敏捷
敏捷开发强调通过迭代和自适应的方式进行开发，以快速响应变化并交付高质量的软件。敏捷开发方法论的核心原则包括个体和互动胜过流程和工具、可工作的软件胜过详尽的文档、响应变化胜过遵循计划。敏捷团队通过紧密合作、灵活性和适应性来实现这些原则。
アジャイル開発は、反復(はんぷく)と適応による開発を重視(じゅうし)し、迅速(じんそく)に変化(へんか)に対応し、高品質(こうひんしつ)なソフトウェア(software)を提供することを目指(めざ)しています。アジャイル開発の中心的な原則(げんそく)には、プロセス(process)とツールよりも個人(こじん)と対話(たいわ)、詳細(しょうさい)な文書(ぶんしょ)よりも動作(どうさ)するソフトウェア(software)、計画(けいかく)に従(したが)うよりも変化(へんか)に対応するというものがあります。アジャイルチームは、密(みつ)な連携(れんけい)、柔軟(じゅうなん)性、適応性を通じてこれらの原則(げんそく)を実現(じつげん)しています。
	
	在区块链平台开发团队中，我的经验包括以下几个方面：
	ブロックチェーンプラットフォームの開発チームでの経験には、以下(いか)のような要素(ようそ)が含(ふく)まれています：

	迭代开发：采用迭代的方式进行开发，将大型项目分解为可管理的小块，每个迭代周期内集中精力完成一部分功能。这有助于提高交付速度、及早获取反馈并快速适应变化。
イテレーション(iteration)開発：大規模(だいきぼ)なプロジェクトを管理可能な小さなチャンク(chunk)に分割(ぶんかつ)し、各イテレーション(iteration)サイクル(cycle)で一部の機能を集中(しゅうちゅう)的に完成(かんせい)させる開発方法です。これにより、納品速度(のうひんそくど)が向上(こうじょう)し、早期(そうき)のフィードバック(feedback)を得(え)て変化に迅速(じんそく)に対応することができます。

	持续集成与交付：通过自动化构建、测试和部署流程，团队能够频繁地将代码集成到主干分支，并快速交付可工作的软件。
	継続(けいぞく)的インテグレーションとデリバリー：自動化されたビルド(build)、テスト、デプロイプロセス(Deployment process)を通じて、チームはコードを頻繁(ひんぱん)にメインブランチ(main branch)に統合(とうごう)し、動作(どうさ)するソフトウェアを迅速(じんそく)に提供することができます。

	紧密合作与交流：敏捷团队倡导开发人员、业务代表和质量保证团队之间的紧密合作与交流。通过日常站会、迭代回顾会议和跨职能团队协作，团队成员能够更好地理解需求、分享知识和解决问题。
	緊密(きんみつ)な協力(きょうりょく)とコミュニケーション：アジャイルチームでは、開発者、ビジネス代表(だいひょう)、品質保証(ひんしつほしょう)チームとの緊密な協力とコミュニケーションを重視しています。日常のスタンドアップ(stand up)ミーティング、イテレーション(iteration)レビュー(review)ミーティング、クロスファンクション(cross function)のチーム協力を通じて、チームメンバーは要件をより良く理解し、知識(ちしき)を共有し、問題を解決(かいけつ)することができます。

	迭代优化：敏捷团队通过迭代优化的方式不断改进工作流程和团队绩效。团队成员鼓励提出改进意见，识别并解决存在的问题，并定期回顾团队的工作实践，以实现持续改进。
	イテレーション(iteration)の最適化：アジャイルチームは、イテレーション(iteration)の最適化を通じてワークフローとチームパフォーマンスを継続的に改善します。チームメンバーは改善提案を募り、問題を特定し解決し、定期的にチームのワークプラクティスを振り返り、持続的な改善を実現します。

	简而言之，敏捷开发方法论提供了一种灵活、协作和迭代的方式来开发软件。在敏捷团队中，我通过与团队成员密切合作、持续学习和改进，不断推动项目的成功交付，并确保软件质量和客户满意度的提升。
	要するに、アジャイル開発方法論(ほうろん)は、柔軟(じゅうなん)で協力的でイテレーション(iteration)の進(すす)む開発手法(しゅほう)を提供します。アジャイルチームでは、チームメンバーとの緊密(きんみつ)な協力、持続(じぞく)的な学習(がくしゅう)と改善を通じて、プロジェクトの成功(せいこう)納品を推進(すいしん)し、ソフトウェアの品質と顧客満足度(まんぞくど)の向上を確保(かくほ)しています。

在项目中实施持续集成和持续交付流程，我通常会采取以下步骤：
	プロジェクトでCIとCDのフローを実装するために、通常、次の手順を踏んでいます：

	设置版本控制和代码仓库：使用版本控制系统（如Git）来管理代码，并在共享的代码仓库中进行集成。
	バージョン管理とコードリポジトリの設定：コードの管理にバージョン管理システム（Gitなど）を使用し、共有のコードリポジトリで統合を行います。

	编写自动化构建脚本：使用构建工具（如Maven、Gradle）编写构建脚本，定义项目的构建过程，包括编译、打包和生成可执行文件。
	自動化ビルドスクリプトの作成：ビルドツール（Maven、Gradleなど）を使用してビルドスクリプトを作成し、プロジェクトのビルドプロセスを定義します。これには、コンパイル、パッケージング、実行可能ファイルの生成などが含まれます。

	配置持续集成工具：将持续集成工具（Jenkins）与代码仓库和构建脚本集成，配置触发器以在代码提交时自动触发构建过程。
	CIツールの設定：CIツール（Jenkinsなど）をコードリポジトリとビルドスクリプトに統合し、コードの変更があった場合に自動的にビルドプロセスがトリガーされるように設定します。

	编写自动化测试脚本：使用自动化测试框架（如JUnit、Selenium）编写测试脚本，覆盖项目的单元测试、集成测试和端到端测试。
	自動化テストスクリプトの作成：自動化テストフレームワーク（JUnit、Seleniumなど）を使用してテストスクリプトを作成し、プロジェクトのユニットテスト、統合テスト、エンドツーエンドテストなどをカバーします。

	配置持续交付流水线：将自动化测试和部署过程与持续集成工具集成，配置持续交付流水线，包括构建、测试、部署和发布。
	CDパイプラインの設定：自動化テストとデプロイプロセスをCIツールと統合し、ビルド、テスト、デプロイ、リリースなどのCDパイプラインを設定します。

	监控和报告：配置监控工具（如SonarQube、Jenkins插件）来监测代码质量、测试覆盖率和构建状态，并生成相应的报告。
	モニタリングとレポート：コード品質、テストカバレッジ、ビルドステータスなどをモニタリングするツール（SonarQube、Jenkinsプラグインなど）を設定し、対応するレポートを生成します。

	通过这些步骤，团队可以实现持续集成和持续交付，不断地交付高质量的软件，并通过自动化流程提高开发效率和团队协作。
	これらの手順により、チームは持続的なインテグレーションとデリバリーを実現し、高品質なソフトウェアを継続的にデリバリーし、自動化されたプロセスにより開発効率とチームの協力を向上させることができます。

----------cicd------------------
プロジェクトでCIとCDのフロー(flow)を実装(じっそう)するために、通常、次(つぎ)の手順(てじゅん)を踏(ふ)んでいます：

	设置版本控制和代码仓库：使用版本控制系统（如Git）来管理代码，并在共享的代码仓库中进行集成。
	バージョン管理とコードリポジトリ(repository)の設定(せってい)：コードの管理にバージョン管理システム（Gitbusketなど）を使用し、共有のコードリポジトリ(repository)で統合を行います。

	编写自动化构建脚本：使用构建工具（如Maven、Gradle）编写构建脚本，定义项目的构建过程，包括编译、打包和生成可执行文件。
	自動化ビルド(build)スクリプト(script)の作成：ビルド(build)ツール（Maven、Gradleなど）を使用してビルド(build)スクリプト(script)を作成し、プロジェクトのビルドプロセス(process)を定義(ていぎ)します。これには、コンパイル(compile)、パッケージング(Packaging)、実行可能ファイル(file)の生成などが含(ふく)まれます。

	配置持续集成工具：将持续集成工具（Jenkins）与代码仓库和构建脚本集成，配置触发器以在代码提交时自动触发构建过程。
	CIツールの設定：CIツール（Jenkinsなど）をコードリポジトリと(repository)ビルド(build)スクリプト(script)に統合(とうごう)し、コードの変更があった場合に自動的にビルドプロセス(process)がトリガー(trigger)されるように設定(せってい)します。

	编写自动化测试脚本：使用自动化测试框架（如JUnit、Selenium）编写测试脚本，覆盖项目的单元测试、集成测试和端到端测试。
	自動化テストスクリプト(testScript)の作成：自動化テストフレームワーク(testFramework)（JUnit、Seleniumなど）を使用してテストスクリプト(testScript)を作成し、プロジェクトのユニットテスト(unitTest)、統合テスト、エンドツーエンドテスト(end-to-end testing)などをカバー(cover)します。

	配置持续交付流水线：将自动化测试和部署过程与持续集成工具集成，配置持续交付流水线，包括构建、测试、部署和发布。
	CDパイプラインの設定(pipeline)：自動化テストとデプロイプロセス(Deployment process)をCIツールと統合し、ビルド、テスト、デプロイ、リリースなどのCDパイプラインを設定します。

	监控和报告：配置监控工具（如SonarQube、Jenkins插件）来监测代码质量、测试覆盖率和构建状态，并生成相应的报告。
	モニタリングとレポート：コード品質、テストカバレッジ(test coverage)、ビルドステータスなどをモニタリング(monitoring)するツール（SonarQube、Jenkinsプラグインなど）を設定(せってい)し、対応するレポートを生成します。

	通过这些步骤，团队可以实现持续集成和持续交付，不断地交付高质量的软件，并通过自动化流程提高开发效率和团队协作。
	これらの手順(てじゅん)により、チームは持続(じぞく)的なインテグレーション(integration)とデリバリー(delivery)を実現し、高品質なソフトウェアを継続(けいぞく)的にデリバリーし、自動化されたプロセスにより開発効率(こうりつ)とチームの協力を向上させることができます。
